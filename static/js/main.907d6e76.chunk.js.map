{"version":3,"sources":["MediaQueries.ts","components/navbar/Slider.tsx","components/navbar/Navbar.tsx","components/Heading.tsx","components/Header.tsx","components/sections/AboutMe.tsx","components/sections/Projects.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MediaQueryMap","SliderContainer","SliderLabel","SliderInput","Slider","setColorTheme","useThemeContext","type","id","onChange","prevTheme","ColorThemes","DARK","LIGHT","defaultChecked","htmlFor","Wrapper","styled","div","props","colorTheme","NavTitle","p","NavLink","a","NavImage","img","LinkContainer","Navbar","href","src","alt","TypeIn","keyframes","Blinker","TextContainer","TitleContainer","Title","h1","Paragraph","Heading","Header","AboutMe","ProjectsContainer","Project","ProjectLink","ProjectDesc","ProjectTechnologies","TechnologyIcon","Projects","className","style","color","ThemeContextImpl","React","createContext","undefined","useContext","App","useState","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.907d6e76.chunk.js","sourcesContent":["export const MediaQueryMap = {\r\n  small: \"@media (min-width: 576px)\",\r\n  medium: \"@media (min-width: 768px)\",\r\n  standard: \"@media (min-width: 992px)\",\r\n  large: \"@media (min-width: 1200px)\"\r\n}","import React from \"react\";\r\nimport styled from \"@emotion/styled/macro\";\r\nimport { useThemeContext, ColorThemes } from \"../../App\";\r\nimport { MediaQueryMap } from \"../../MediaQueries\";\r\n\r\nconst SliderContainer = styled.div`\r\n  height: auto;\r\n  width: auto;\r\n  margin-left: auto;\r\n  padding: 0 15px;\r\n  ${MediaQueryMap.small} {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst SliderLabel = styled.label`\r\n  display: block;\r\n  width: 60px;\r\n  height: 32px;\r\n  position: relative;\r\n  background: gray;\r\n  border-radius: 25px;\r\n  transition: background-color 0.3s linear;\r\n  &:after {\r\n    transition: transform 0.2s linear;\r\n    position: absolute;\r\n    top: 6px;\r\n    left: 6px;\r\n    display: block;\r\n    content: \"\";\r\n    background: white;\r\n    border-radius: 15px;\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n`;\r\nconst SliderInput = styled.input`\r\n  display: none;\r\n  &:checked + ${SliderLabel} {\r\n    background-color: lightblue;\r\n    &:after {\r\n      transform: translateX(28px);\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Slider() {\r\n  const { setColorTheme } = useThemeContext();\r\n  \r\n  const handleChange = () => {\r\n    setColorTheme((prevTheme) => (\r\n      prevTheme === ColorThemes.DARK ? ColorThemes.LIGHT : ColorThemes.DARK\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <SliderContainer>\r\n      <SliderInput type=\"checkbox\" id=\"SliderInput\" onChange={handleChange} defaultChecked={true}/>\r\n      <SliderLabel htmlFor=\"SliderInput\" />\r\n    </SliderContainer>\r\n  )\r\n}","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useThemeContext, ThemedComponent, ColorThemes } from \"../../App\";\r\nimport Slider from \"./Slider\";\r\nimport { MediaQueryMap } from \"../../MediaQueries\";\r\n\r\nconst Wrapper = styled.div<ThemedComponent>`\r\n  display: flex;\r\n  align-items: center;\r\n  min-height: 50px;\r\n  height: 7vh;\r\n  font-size: 1.8rem;\r\n  width: 100%;\r\n  background-color: ${props => props.colorTheme === ColorThemes.DARK ? \r\n    (\"#282c34\") : (\"#d3d6de\")\r\n  };\r\n  ${MediaQueryMap.small} {\r\n    font-size: 1.6rem;\r\n  }\r\n  ${MediaQueryMap.medium} {\r\n    font-size: 1.4rem;\r\n  }\r\n  ${MediaQueryMap.standard} {\r\n    font-size: 1.2rem;\r\n  }\r\n`;\r\n\r\nconst NavTitle = styled.p<ThemedComponent>`\r\n  font-size: 1em;  \r\n  font-family: 'Patua One', cursive;\r\n  letter-spacing: 1.2px;\r\n  padding: 0 4vw;\r\n  white-space: nowrap;\r\n  color: ${props => props.colorTheme === ColorThemes.DARK ? \r\n    (\"#e2e4e9\") : (\"#282c34\")\r\n  };\r\n  ${MediaQueryMap.small} {\r\n    font-size: 1.1em;\r\n  }\r\n  ${MediaQueryMap.standard} {\r\n    font-size: 1.3em;\r\n  }\r\n`;\r\n\r\nconst NavLink = styled.a`\r\n  display: inline-block;\r\n  padding: 0 7px;\r\n`;\r\n\r\nconst NavImage = styled.img`\r\n  display: block;\r\n  margin: auto;\r\n  height: 32px;\r\n  width: auto;\r\n`;\r\n\r\nconst LinkContainer = styled.div`\r\n  display: none;\r\n  ${MediaQueryMap.small} {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-left: auto;\r\n    padding: 0 20px;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nexport default function Navbar() {\r\n  const {colorTheme} = useThemeContext();\r\n  return (\r\n    <Wrapper colorTheme={colorTheme}>\r\n      <NavTitle colorTheme={colorTheme}>Thomas Whiting</NavTitle>\r\n      <LinkContainer>\r\n        <NavLink href=\"mailto:TomppaFI@protonmail.com\">\r\n          <NavImage src=\"./Email-Icon.png\" alt=\"Email link\" />\r\n        </NavLink>\r\n        <NavLink href=\"https://github.com/Tomppa-FI\">\r\n          <NavImage src={\r\n            colorTheme === ColorThemes.DARK ? \"./GH-Light.png\" : \"./GH-Dark.png\"\r\n          } alt=\"GitHub Link\"/>\r\n        </NavLink>\r\n        <NavLink href=\"https://www.linkedin.com/in/tom-whiting-bbbb491a0/\">\r\n          <NavImage src=\"./LI-In-Bug.png\" alt=\"LinkedIn Link\" />\r\n        </NavLink>\r\n      </LinkContainer>\r\n      <Slider />\r\n    </Wrapper>\r\n  )\r\n}","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { keyframes } from \"@emotion/core\"; \r\nimport { ThemedComponent, ColorThemes, useThemeContext } from \"../App\";\r\nimport { MediaQueryMap } from \"../MediaQueries\";\r\n\r\nconst TypeIn = keyframes`\r\n  from {\r\n    max-width: 0%;\r\n  }\r\n  to {\r\n    max-width: 100%;\r\n  }\r\n`;\r\n\r\nconst Blinker = keyframes`\r\n  from, to {\r\n    border-color: transparent;\r\n  }\r\n  50% {\r\n    border-color: #FF652F;\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst TextContainer = styled.div`\r\n  font-size: 1.5rem;\r\n  margin-left: 4vw;\r\n`;\r\n\r\nconst TitleContainer = styled.div`\r\n  max-width: 20%;\r\n`;\r\n\r\nconst Title = styled.h1<ThemedComponent>`\r\n  font-family: 'Amatic SC', cursive;\r\n  display: inline-block;\r\n  padding-right: 2.5vw;\r\n  border-right: 5px solid #FF652F;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  width: auto;\r\n  font-size: 2em;\r\n  letter-spacing: 2px;\r\n  animation: \r\n    ${TypeIn} 2s steps(50, end),\r\n    ${Blinker} 1.2s step-end infinite;\r\n  color: ${props => props.colorTheme === ColorThemes.DARK ? \r\n    (\"#282c34\") : (\"#e2e4e9\") \r\n  };\r\n  ${MediaQueryMap.medium} {\r\n    font-size: 2.1em;\r\n  }\r\n  ${MediaQueryMap.standard} {\r\n    font-size: 2.2em;\r\n  }\r\n`;\r\n\r\nconst Paragraph = styled.p<ThemedComponent>`\r\n  max-width: 90%;\r\n  font-family: 'Montserrat', sans-serif;\r\n  font-size: .8em;\r\n  font-weight: 700;\r\n  letter-spacing: 1.2px;\r\n  color: ${props => props.colorTheme === ColorThemes.DARK ? \r\n    (\"#282c34\") : (\"#e2e4e9\") \r\n  };\r\n  ${MediaQueryMap.small} {\r\n    font-size: .9em;\r\n    max-width: 80%;\r\n  }\r\n  ${MediaQueryMap.medium} {\r\n    font-size: 1em;\r\n    max-width: 70%;\r\n  }\r\n  ${MediaQueryMap.standard} {\r\n    font-size: 1.1em;\r\n    max-width: 60%;\r\n  }\r\n`;\r\n\r\nexport default function Heading() {\r\n  const {colorTheme} = useThemeContext();\r\n  return (\r\n    <Wrapper>\r\n      <TextContainer>\r\n        <TitleContainer>\r\n          <Title colorTheme={colorTheme}>Thomas Whiting</Title>\r\n        </TitleContainer>\r\n        <Paragraph colorTheme={colorTheme}>\r\n          My name is Thomas Whiting, and I am a self-taught aspiring developer. I moved to Finland in October 2019 after falling in love with the country and it's culture, and now that I'm here, I hope to enhance the lives of people through the use of technology.\r\n        </Paragraph>\r\n      </TextContainer>\r\n    </Wrapper>\r\n  )\r\n}","import React from \"react\";\r\nimport Navbar from \"./navbar/Navbar\";\r\nimport styled from \"@emotion/styled\";\r\nimport Heading from \"./Heading\";\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n  background-image: url(\"./Header-BG.jpg\");\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  opacity: 80%;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport default function Header() {\r\n  return (\r\n    <Wrapper>\r\n      <Navbar />\r\n      <Heading />\r\n    </Wrapper>\r\n  )\r\n}","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useThemeContext, ThemedComponent, ColorThemes } from \"../../App\";\r\n\r\nconst Wrapper = styled.div<ThemedComponent>`\r\n  padding: 6vh 4vw;\r\n  background-color: ${props => props.colorTheme === ColorThemes.DARK ? \r\n    (\"#282c34\") : (\"#d3d6de\")\r\n  };\r\n  font-size: 1rem;\r\n`;\r\nconst Title = styled.h1<ThemedComponent>`\r\n  text-align: center;\r\n  font-family: \"Montserrat\", sans-serif;\r\n  color: ${props => props.colorTheme === ColorThemes.DARK ? \r\n    (\"#e2e4e9\") : (\"#282c34\") \r\n  };\r\n  font-size: 2em;\r\n`;\r\n\r\nconst Paragraph = styled.p<ThemedComponent>`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  padding: 2vh 8vw;\r\n  color: ${props => props.colorTheme === ColorThemes.DARK ? \r\n    (\"#e2e4e9\") : (\"#282c34\") \r\n  };\r\n  font-size: 1.5em;\r\n`;\r\nexport default function AboutMe() {\r\n  const {colorTheme} = useThemeContext();\r\n  return (\r\n    <Wrapper colorTheme={colorTheme}>\r\n      <Title colorTheme={colorTheme}>Hi, I'm Tom. Good to meet you!</Title>\r\n      <Paragraph colorTheme={colorTheme}>\r\n        My journey towards becoming a full-stack developer began in 2017.\r\n        I had always been passionate about development, as I had practiced with it when I was younger,\r\n        and the timing felt right and I transitioned from IT Technician to development.\r\n        I began by following the Open Course provided by the University of Helsinki in Object Orientated Programming,\r\n        followed by Colt Steele's course in Web Development. I am proficient with Java, Python, JavaScript, TypeScript and React, \r\n        and I am constantly on the lookout for new technologies.\r\n      </Paragraph>\r\n\r\n      <Paragraph colorTheme={colorTheme}>\r\n        Nowadays you can find me working on my own Projects, primarily using React. I am highly motivated, \r\n        and ready for a challenge, and I hope to join a professional team where I can contribute my skills to projects, \r\n        and enhance my own knowledge and capabilities. I am always open to try any new technologies, and to learn new things.\r\n        I hope to hear from you soon!\r\n      </Paragraph>\r\n    </Wrapper>\r\n  )\r\n}","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useThemeContext, ThemedComponent, ColorThemes } from \"../../App\";\r\nimport { MediaQueryMap } from \"../../MediaQueries\";\r\n\r\nconst Wrapper = styled.div<ThemedComponent>`\r\n  padding: 6vh 4vw;\r\n  background-color: #C8C8C8;\r\n  font-size: 1rem;\r\n`;\r\nconst Title = styled.h1<ThemedComponent>`\r\n  text-align: center;\r\n  color: #282c34;\r\n  font-family: \"Montserrat\", sans-serif;\r\n  font-size: 2em;\r\n`;\r\n\r\nconst ProjectsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst Project = styled.div<ThemedComponent>`\r\n  background-color: ${props => props.colorTheme === ColorThemes.DARK ? \r\n    (\"#282c34\") : (\"#d3d6de\")\r\n  };\r\n  width: 96%;\r\n  margin: 2%;\r\n  padding: 2%;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  ${MediaQueryMap.medium} {\r\n    width: 46%;\r\n  }\r\n  ${MediaQueryMap.standard} {\r\n    width: 29%;\r\n  }\r\n`;\r\n\r\nconst ProjectLink = styled.a<ThemedComponent>`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  text-align: center;\r\n  padding: 2vh;\r\n  color: #282c34;\r\n  font-size: 1.5em;\r\n  text-decoration: none;\r\n  color: ${props => props.colorTheme === ColorThemes.DARK ? \r\n    (\"#e2e4e9\") : (\"#282c34\") \r\n  };\r\n`;\r\n\r\nconst ProjectDesc = styled.p<ThemedComponent>`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  text-align: center;\r\n  padding: 2vh 4%;\r\n  font-size: 1.2em;\r\n  color: ${props => props.colorTheme === ColorThemes.DARK ? \r\n    (\"#e2e4e9\") : (\"#282c34\") \r\n  };\r\n`;\r\n\r\nconst ProjectTechnologies = styled.div`\r\n  display: flex;\r\n  padding: 2vh 0;\r\n`;\r\n\r\nconst TechnologyIcon = styled.img`\r\n  display: block;\r\n  margin: auto;\r\n  height: auto;\r\n  padding: 0 16px;\r\n  width: 100px;\r\n`;\r\n\r\nexport default function Projects() {\r\n  const { colorTheme } = useThemeContext();\r\n  return (\r\n    <Wrapper colorTheme={colorTheme}>\r\n      <Title colorTheme={colorTheme}>My Recent Projects</Title>\r\n      <ProjectsContainer>\r\n        <Project colorTheme={colorTheme}>\r\n          <ProjectLink href=\"https://enigmatic-peak-53768.herokuapp.com/\" colorTheme={colorTheme}>Tico's Quest <i className=\"fas fa-external-link-alt\" style={{color: `#FF652F`}}></i></ProjectLink>\r\n          <ProjectDesc colorTheme={colorTheme}>\r\n            Tico's Quest is a Zelda-Inspired Browser game utilizing React.\r\n            Tico must navigate a dangerous maze, collecting coins, and avoiding monsters until he reaches his bone.\r\n          </ProjectDesc>\r\n          <ProjectDesc colorTheme={colorTheme}>\r\n            I thoroughly enjoyed building it, and the challenges I overcame helped me with my React knowledge.\r\n          </ProjectDesc>\r\n          <ProjectTechnologies>\r\n            <TechnologyIcon src=\"./Icons/JSLogo.png\" alt=\"JavaScript icon\" />\r\n            <TechnologyIcon src=\"./Icons/ReactLogo.png\" alt=\"React icon\" />\r\n          </ProjectTechnologies>\r\n        </Project>\r\n        <Project colorTheme={colorTheme}>\r\n          <ProjectLink href=\"https://www.tmijeminahovi.fi\" colorTheme={colorTheme}>TMI Jemina Hovi <i className=\"fas fa-external-link-alt\" style={{color: `#FF652F`}}></i></ProjectLink>\r\n          <ProjectDesc colorTheme={colorTheme}>\r\n            This was the first project I built that I felt truly had purpose. My Girlfriend has her own business as a beautician,\r\n            and her original website was built using WordPress. Since it lacked some features she otherwise requested, I took it upon myself to build her a custom website.\r\n          </ProjectDesc>\r\n          <ProjectDesc colorTheme={colorTheme}>\r\n            This is currently deployed on AWS, using CloudFront to serve the page over HTTPS.\r\n          </ProjectDesc>\r\n          <ProjectTechnologies>\r\n            <TechnologyIcon src=\"./Icons/JSLogo.png\" alt=\"JavaScript icon\" />\r\n          </ProjectTechnologies>\r\n        </Project>\r\n        <Project colorTheme={colorTheme}>\r\n          <ProjectLink href=\"https://Tomppa-FI.Github.io\" colorTheme={colorTheme}>This Portfolio <i className=\"fas fa-external-link-alt\" style={{color: `#FF652F`}}></i></ProjectLink>\r\n          <ProjectDesc colorTheme={colorTheme}>\r\n            This page is a replacement for my previous portfolio. I initially had a static page, but as I built more projects I felt like using React would allow me to manage elements easier.\r\n          </ProjectDesc>\r\n          <ProjectDesc colorTheme={colorTheme}>\r\n            This is deployed on Github pages, though I plan to migrate it to AWS in future.\r\n          </ProjectDesc>\r\n          <ProjectTechnologies>\r\n            <TechnologyIcon src=\"./Icons/JSLogo.png\" alt=\"JavaScript icon\" />\r\n            <TechnologyIcon src=\"./Icons/TSLogo.png\" alt=\"TypeScript icon\" />\r\n            <TechnologyIcon src=\"./Icons/ReactLogo.png\" alt=\"React icon\" />\r\n          </ProjectTechnologies>\r\n        </Project>\r\n      </ProjectsContainer>\r\n    </Wrapper>\r\n  )\r\n}","import React, { useState, useContext } from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport AboutMe from \"./components/sections/AboutMe\";\r\nimport Projects from \"./components/sections/Projects\";\r\n\r\nexport enum ColorThemes {\r\n  DARK,\r\n  LIGHT\r\n}\r\n\r\ninterface ThemeContext {\r\n  colorTheme: ColorThemes,\r\n  setColorTheme: React.Dispatch<React.SetStateAction<ColorThemes>>\r\n}\r\n\r\nconst ThemeContextImpl = React.createContext<ThemeContext | undefined>(undefined);\r\nexport const useThemeContext = () => useContext(ThemeContextImpl)!;\r\n\r\nexport interface ThemedComponent {\r\n  colorTheme: ColorThemes\r\n}\r\n\r\n\r\nexport default function App() {\r\n  const [colorTheme, setColorTheme] = useState(ColorThemes.DARK);\r\n\r\n  return (\r\n    <ThemeContextImpl.Provider value={{colorTheme, setColorTheme}}>\r\n      <Header />\r\n      <AboutMe />\r\n      <Projects />\r\n    </ThemeContextImpl.Provider>\r\n  )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}